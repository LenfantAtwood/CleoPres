"use client";
import * as React from "react";
import { useState, FormEvent, ChangeEvent } from 'react';
import Image from 'next/image';
import { useRouter } from 'next/navigation';
import { Card, CardContent } from "@/components/ui/card";
import {
  Carousel,
  CarouselContent,
  CarouselItem,
  CarouselNext,
  CarouselPrevious,
} from "@/components/ui/carousel";
import Page1 from "@/components/customComponents/page1";
import Page2 from "@/components/customComponents/page2";
import Page3 from "@/components/customComponents/page3";
import Page4 from "@/components/customComponents/page4";
import Page5 from "@/components/customComponents/page5";
import Page6 from "@/components/customComponents/page6";
import PageS from "@/components/customComponents/image_scroll";
import { Button } from "@/components/ui/button";
import { Home } from "@/components/customComponents/home";

interface FormData {
  [key: string]: any;
}

// Define submit button component
export function SubmitButton({ onClick }: { onClick: () => void }) {
  return (
    <Button className="w-full max-w-[200px]" onClick={onClick}>
      Submit
    </Button>
  );
}

// Main Carousel Component
export default function CarouselDemo() {
  const [formsData, setFormsData] = useState<Record<string, any>>({});
  const [name, setName] = useState<string>('');
  const [studentNumber, setStudentNumber] = useState<string>('');

  // Handle form data change for any form
  const handleFormChange = (formId: string, data: any) => {
    setFormsData((prevFormsData) => ({
      ...prevFormsData,
      [formId]: data,
    }));
  };

  // Handle form submission
  const handleSubmit = async () => {
    console.log("Submitted Form Data:", formsData);
    // add student Number into form from the state "name" and "studentNumber"
    formsData["name"] = name;
    formsData["studentID"] = studentNumber;
    try {
      // Send data to the backend API
      const response = await fetch("/api/submit", {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify(formsData),
      });

      if (response.ok) {
        const result = await response.json();
        alert(`Form submitted successfully! Message: ${result.message}`);
      } else if (response.status === 401) {
        const result = await response.json();
        alert(`Failed to submit form. Unauthorized. Message: ${result.error}`);
      } else if (response.status === 500) {
        const result = await response.json();
        alert(`Failed to submit form. Internal server error. Message: ${result.error}`);
      } else {
        alert(`Failed to submit form. Please try again.`);
      }
    } catch (error) {
      console.error("Error submitting data:", error);
      alert(`Failed to submit form. Please try again. Below is the error message: ${error}`);
    }
  };

  // Define the carousel items dynamically
  const carouselItems = [
    <div key="welcome">
      <Home setName={setName} setStudentNumber={setStudentNumber} name={name} studentNumber={studentNumber} />
    </div>,
    <Page1 key="page1" onChange={(data: FormData) => handleFormChange("page1", data)} />,
    <Page2 key="page2" onChange={(data: FormData) => handleFormChange("page2", data)} />,
    <Page3 key="page3" onChange={(data: FormData) => handleFormChange("page3", data)} />,
    <Page4 key="page4" onChange={(data: FormData) => handleFormChange("page4", data)} />,
    <Page5 key="page5" onChange={(data: FormData) => handleFormChange("page5", data)} />,
    <Page6 key="page6" onChange={(data: FormData) => handleFormChange("page6", data)} />,
    <PageS key="pageS" onChange={(data: FormData) => handleFormChange("pageS", data)} />,
    <div 
      className="flex flex-col items-center justify-center w-full h-full p-8 bg-gradient-to-br from-purple-50 to-blue-50 rounded-2xl shadow-lg border border-purple-100"
      key="submit-button"
    >
      <div className="text-center space-y-6 max-w-2xl">
        <div className="space-y-4">
          <h2 className="text-3xl font-bold text-purple-900">
            Thank You for Completing the Form! üéâ
          </h2>
          <p className="text-lg text-gray-600">
            Your responses have been recorded. Please click the button below to submit your form.
          </p>
        </div>
        <div className="relative">
          <div className="absolute inset-0 flex items-center justify-center space-x-1 animate-confetti">
            {[...Array(12)].map((_, i) => (
              <span
                key={i}
                className="w-2 h-2 bg-purple-500 rounded-full opacity-0 animate-confetti-item"
                style={{
                  animationDelay: `${i * 0.1}s`,
                  transform: `translateY(${Math.random() * 20 - 10}px) translateX(${Math.random() * 20 - 10}px)`,
                }}
              />
            ))}
          </div>
          <div className="relative z-10">
            <SubmitButton onClick={handleSubmit} />
          </div>
        </div>
      </div>
    </div>
  ];

  const carouselRef = React.useRef<HTMLDivElement | null>(null);

  React.useEffect(() => {
    const handleKeyDown = (event: KeyboardEvent) => {
      if (event.key === "PageDown") {
        const nextButton = carouselRef.current?.querySelector(
          '[data-carousel-next]'
        ) as HTMLElement;
        if (nextButton) {
          nextButton.click(); // Simulate a click on the next button
        }
      }
      if (event.key === "PageUp") {
        const prevButton = carouselRef.current?.querySelector(
          '[data-carousel-prev]'
        ) as HTMLElement;
        if (prevButton) {
          prevButton.click(); // Simulate a click on the next button
        }
      }
    };

    document.addEventListener("keydown", handleKeyDown);
    return () => {
      document.removeEventListener("keydown", handleKeyDown);
    };
  }, []);

  return (
    <div
      className="flex items-center justify-center min-h-screen p-8 pb-20 gap-16 sm:p-20 font-[family-name:var(--font-geist-sans)]"
      ref={carouselRef}
    >
      <Carousel className="w-full">
        <CarouselContent className="w-[90%] items-center mx-auto">
          {carouselItems.map((item, index) => (
            <CarouselItem key={index} className="w-full">
              <div className="w-full">{item}</div>
            </CarouselItem>
          ))}
        </CarouselContent>
        <CarouselPrevious className="text-3xl w-[5%] h-[5%]" data-carousel-prev />
        <CarouselNext className="text-3xl w-[5%] h-[5%]" data-carousel-next />
      </Carousel>
    </div>
  );
}

// "use client";
// import * as React from "react";
// // import { useState } from "react";

// import { Card, CardContent } from "@/components/ui/card";
// import {
//   Carousel,
//   CarouselContent,
//   CarouselItem,
//   CarouselNext,
//   CarouselPrevious,
// } from "@/components/ui/carousel";

// import Page1 from "@/components/customComponents/page1";
// import Page2 from "@/components/customComponents/page2";
// import Page3 from "@/components/customComponents/page3";
// import Page4 from "@/components/customComponents/page4";
// import Page5 from "@/components/customComponents/page5";
// import Page6 from "@/components/customComponents/page6";

// import home from "@/components/customComponents/index";
// import PageS from "@/components/customComponents/image_scroll";

// interface FormData {
//   [key: string]: any;
// }


// // Import button
// import { Button } from "@/components/ui/button";

// // Define submit here
// export function SubmitButton({ onClick }: { onClick: () => void }) {
//   return (
//     <Button className="w-full max-w-[200px]" onClick={onClick}>
//       Submit
//     </Button>
//   );
// }


// import { useState, FormEvent, ChangeEvent } from 'react';
// import Image from 'next/image';
// import { useRouter } from 'next/navigation';
// // import { supabase } from '@/utils/supabase/server';


// export function Home( {name, setName, setStudentNumber, studentNumber}: {name: string, setName: (name: string) => void, setStudentNumber: (studentNumber: string) => void, studentNumber: string} ) {
//   const [submitted, setSubmitted] = useState<boolean>(false);
//   const [isGifPlaying, setIsGifPlaying] = useState<boolean>(true);
//   const [error, setError] = useState<string>('');
//   const router = useRouter();

//   const handleSubmit = async (e: FormEvent) => {
//     e.preventDefault();
//     if (!name || !studentNumber) {
//       setError('Both fields are required.');
//       return;
//     }
  
//     try {
//       const response = await fetch('/api/login', {
//         method: 'POST',
//         headers: { 
//           'Content-Type': 'application/json',
//         },
//         credentials: 'include', // Important for cookies
//         body: JSON.stringify({ 
//           name, 
//           studentNumber 
//         }),
//       });
  
//       const data = await response.json();
      
//       if (!response.ok) {
//         throw new Error(data.error || 'Login failed');
//       }
  
//       setSubmitted(true);
//       router.push('/next-page');
//     } catch (err) {
//       // setError(err.message);
//       console.error('Login error:', err);
//     }
//   };

//   const toggleGif = () => {
//     setIsGifPlaying(!isGifPlaying);
//   };

//   return (
//     <div className="min-h-screen bg-gradient-to-b from-purple-50 to-blue-100 py-12 px-4 sm:px-6 lg:px-8" onClick={toggleGif}>
//       <div className="max-w-3xl mx-auto">
//         <div className="text-center space-y-4 mb-12">
//           <h1 className="text-5xl font-extrabold bg-gradient-to-r from-purple-600 to-blue-500 bg-clip-text text-transparent">
//             Ideal President App
//           </h1>
//           <h2 className="text-2xl text-gray-700 font-semibold">
//             Vote for Your Favorite President <span className="text-red-500">‚ô•Ô∏è</span>
//           </h2>
//         </div>

//         <main className="bg-white rounded-2xl shadow-xl p-8 sm:p-12 flex flex-col lg:flex-row items-center gap-12">
//           <div className="flex-1">
//             <div className="cursor-pointer transform hover:scale-105 transition-transform duration-300">
//               <Image
//                 src={isGifPlaying ? '/images/animated.gif' : '/images/vote.png'}
//                 alt="Current image"
//                 width={400}
//                 height={400}
//                 className="rounded-lg shadow-lg"
//               />
//             </div>
//           </div>

//           <form onSubmit={handleSubmit} className="flex-1 w-full space-y-8">
//             <div className="space-y-6">
//               <div>
//                 <label htmlFor="name" className="block text-sm font-medium text-gray-700 mb-2">
//                   Full Name
//                 </label>
//                 <input
//                   id="name"
//                   type="text"
//                   value={name}
//                   onChange={(e: ChangeEvent<HTMLInputElement>) => setName(e.target.value)}
//                   placeholder="(e.g. Chen Dawen)"
//                   className="w-full px-4 py-3 rounded-lg border-2 border-purple-200 focus:border-purple-500 focus:ring-2 focus:ring-purple-200 transition-all outline-none"
//                 />
//               </div>

//               <div>
//                 <label htmlFor="studentNumber" className="block text-sm font-medium text-gray-700 mb-2" >
//                   Student Number
//                 </label>
//                 <input
//                   id="studentNumber"
//                   type="text"
//                   value={studentNumber}
//                   onChange={(e: ChangeEvent<HTMLInputElement>) => {
//                     setStudentNumber(e.target.value);
//                     if (e.target.value.length !== 7) {
//                       setError("Student number must be exactly 7 characters. If you are from MPU, enter 'mpu1234'; if you are from MUST, enter 'must123'.");
//                     } else {
//                       setError('');
//                     }
//                   }}
//                   placeholder="(e.g. ab12345)"
//                   className="w-full px-4 py-3 rounded-lg border-2 border-purple-200 focus:border-purple-500 focus:ring-2 focus:ring-purple-200 transition-all outline-none"
//                 />
//               </div>
//             </div>

//             {error && (
//               <div className="bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded-lg">
//                 {error}
//               </div>
//             )}

//             <button
//               type="submit"
//               className="w-full bg-gradient-to-r from-purple-600 to-blue-500 hover:from-purple-700 hover:to-blue-600 text-white font-bold py-3 px-6 rounded-lg transition-all transform hover:scale-105 duration-200 shadow-lg"
//             >
//               Submit and slide right
//             </button>
//           </form>
//         </main>

//         {submitted && (
//           <div className="mt-8 p-6 bg-green-50 border-2 border-green-200 rounded-xl text-center animate-fade-in">
//             <p className="text-xl font-semibold text-green-800 mb-2">Hello, {name}! üéâ</p>
//             <p className="text-gray-700">Slide right to browse the list of presidents!</p>
//           </div>
//         )}
//       </div>
//     </div>
//   );
// }


// // Main Carousel Component
// export default function CarouselDemo() {
//   const [formsData, setFormsData] = useState<Record<string, any>>({});
//   const [name, setName] = useState<string>('');
//   const [studentNumber, setStudentNumber] = useState<string>('');

//   // Handle form data change for any form
//   const handleFormChange = (formId: string, data: any) => {
//     setFormsData((prevFormsData) => ({
//       ...prevFormsData,
//       [formId]: data,
//     }));
//   };

//   // Handle form submission
//   const handleSubmit = async () => {
//     console.log("Submitted Form Data:", formsData);
//     // add student Number into form from the state "name" and "studentNumber"
//     formsData["name"] = name;
//     formsData["studentID"] = studentNumber;
//     try {
//       // Send data to the backend API
//       const response = await fetch("/api/submit", {
//         method: "POST",
//         headers: {
//           "Content-Type": "application/json",
//         },
//         body: JSON.stringify(formsData),
//       });

//     //   if (!response.ok) {
//     //     throw new Error("Failed to submit data");
//     //   }

//     //   const result = await response.json();
//     //   console.log("Submission result:", result);

//     //   // Reset form data
//     //   // setFormsData({});
//     //   alert("Form submitted successfully!");
//     // } catch (error) {
//     //   console.error("Error submitting data:", error);
//     //   alert(`Failed to submit form. Please try again. Below is the error message: ${error}`);
//     // }

//     // if sucess, response will be code 201 with message XXX
//     // if failed, response will be code XXX with message XXX
//     // in both case, we will alert the message
//     if (response.ok) {
//       const result = await response.json();
//       alert(`Form submitted successfully! Message: ${result.message}`);
//     }
//     // handle case by case
//     else if (response.status === 401) {
//       const result = await response.json();
//       alert(`Failed to submit form. Unauthorized. Message: ${result.error}`);
//     }
//     else if (response.status === 500) {
//       const result = await response.json();
//       alert(`Failed to submit form. Internal server error. Message: ${result.error}`);
//     }
//     else {
//       alert(`Failed to submit form. Please try again.`);
//     }
//   }
//   catch (error) {
//     console.error("Error submitting data:", error);
//     alert(`Failed to submit form. Please try again. Below is the error message: ${error}`);
//   }
// };
    


//   // Define the carousel items dynamically
//   const carouselItems = [
//     // pass in student Name, student Number and on change function
//     <div key="welcome">
//       <Home setName={setName} setStudentNumber={setStudentNumber} name={name} studentNumber={studentNumber} />
//     </div>,
//     <Page1 key="page1" onChange={(data: FormData) => handleFormChange("page1", data)} />,
//     <Page2 key="page2" onChange={(data: FormData) => handleFormChange("page2", data)} />,
//     <Page3 key="page3" onChange={(data: FormData) => handleFormChange("page3", data)} />,
//     <Page4 key="page4" onChange={(data: FormData) => handleFormChange("page4", data)} />,
//     <Page5 key="page5" onChange={(data: FormData) => handleFormChange("page5", data)} />,
//     <Page6 key="page6" onChange={(data: FormData) => handleFormChange("page6", data)} />,
//     <PageS key="pageS" onChange={(data: FormData) => handleFormChange("pageS", data)} />,
//     <div 
//   className="flex flex-col items-center justify-center w-full h-full p-8 bg-gradient-to-br from-purple-50 to-blue-50 rounded-2xl shadow-lg border border-purple-100"
//   key="submit-button"
// >
//   <div className="text-center space-y-6 max-w-2xl">
//     {/* Thank You Message */}
//     <div className="space-y-4">
//       <h2 className="text-3xl font-bold text-purple-900">
//         Thank You for Completing the Form! üéâ
//       </h2>
//       <p className="text-lg text-gray-600">
//         Your responses have been recorded. Please click the button below to submit your form.
//       </p>
//     </div>

//     {/* Confetti Animation (Optional) */}
//     <div className="relative">
//       <div className="absolute inset-0 flex items-center justify-center space-x-1 animate-confetti">
//         {[...Array(12)].map((_, i) => (
//           <span
//             key={i}
//             className="w-2 h-2 bg-purple-500 rounded-full opacity-0 animate-confetti-item"
//             style={{
//               animationDelay: `${i * 0.1}s`,
//               transform: `translateY(${Math.random() * 20 - 10}px) translateX(${Math.random() * 20 - 10}px)`,
//             }}
//           />
//         ))}
//       </div>

//       {/* Submit Button */}
//       <div className="relative z-10">
//         <SubmitButton onClick={handleSubmit} />
//       </div>
//     </div>

//     {/* Additional Note
//     <p className="text-sm text-gray-500 mt-4">
//       Once submitted, your responses cannot be changed. Please review your answers carefully.
//     </p> */}
//   </div>
// </div>
//   ];

//   const carouselRef = React.useRef<HTMLDivElement | null>(null);

//   React.useEffect(() => {
//     const handleKeyDown = (event: KeyboardEvent) => {
//       if (event.key === "PageDown") {
//         const nextButton = carouselRef.current?.querySelector(
//           '[data-carousel-next]'
//         ) as HTMLElement;
//         if (nextButton) {
//           nextButton.click(); // Simulate a click on the next button
//         }
//       }
//       if (event.key === "PageUp") {
//         const prevButton = carouselRef.current?.querySelector(
//           '[data-carousel-prev]'
//         ) as HTMLElement;
//         if (prevButton) {
//           prevButton.click(); // Simulate a click on the next button
//         }
//       }
//     };

//     document.addEventListener("keydown", handleKeyDown);
//     return () => {
//       document.removeEventListener("keydown", handleKeyDown);
//     };
//   }, []);

//   return (
//     <div
//       className="flex items-center justify-center min-h-screen p-8 pb-20 gap-16 sm:p-20 font-[family-name:var(--font-geist-sans)]"
//       ref={carouselRef}
//     >
//       <Carousel className="w-full">
//         <CarouselContent className="w-[90%] items-center mx-auto">
//           {carouselItems.map((item, index) => (
//             <CarouselItem key={index} className="w-full">
//               <div className="w-full">{item}</div>
//             </CarouselItem>
//           ))}
//         </CarouselContent>
//         <CarouselPrevious className="text-3xl w-[5%] h-[5%]" data-carousel-prev />
//         <CarouselNext className="text-3xl w-[5%] h-[5%]" data-carousel-next />
//       </Carousel>
//     </div>
//   );
// }